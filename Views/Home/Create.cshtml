@model Product
@{
    ViewData["Title"] = "Add New Product";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-plus me-2"></i>Add New Product</h1>
            <a href="/" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-1"></i>Back to List
            </a>
        </div>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-edit me-2"></i>Product Information</h5>
            </div>
            <div class="card-body">
                <form id="productForm">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="name" class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="name" name="name" required maxlength="100"
                                   placeholder="Enter product name">
                            <div class="form-text">Maximum 100 characters</div>
                        </div>
                        <div class="col-md-6">
                            <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" 
                                       step="0.01" min="0" required placeholder="0.00">
                            </div>
                        </div>
                    </div>

                    <div class="row g-3 mt-2">
                        <div class="col-md-6">
                            <label for="stock" class="form-label">Stock Quantity <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="stock" name="stock" 
                                   min="0" required placeholder="0">
                        </div>
                        <div class="col-md-6">
                            <label for="isActive" class="form-label">Status</label>
                            <select class="form-control" id="isActive" name="isActive">
                                <option value="true" selected>Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                    </div>

                    <div class="row g-3 mt-2">
                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" 
                                      rows="4" maxlength="500" placeholder="Enter product description"></textarea>
                            <div class="form-text">Maximum 500 characters (<span id="charCount">0</span>/500)</div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-save me-1"></i>Save Product
                            </button>
                            <button type="reset" class="btn btn-outline-secondary me-2">
                                <i class="fas fa-undo me-1"></i>Reset Form
                            </button>
                            <a href="/" class="btn btn-outline-danger">
                                <i class="fas fa-times me-1"></i>Cancel
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="alertContainer" class="mt-3" style="display: none;">
    <div class="alert" id="alertMessage"></div>
</div>

@section Scripts {
    <script>
        // Character counter for description
        document.getElementById('description').addEventListener('input', function() {
            const currentLength = this.value.length;
            document.getElementById('charCount').textContent = currentLength;
            
            if (currentLength > 450) {
                document.getElementById('charCount').className = 'text-warning';
            } else if (currentLength > 480) {
                document.getElementById('charCount').className = 'text-danger';
            } else {
                document.getElementById('charCount').className = '';
            }
        });

        // Form submission
        document.getElementById('productForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const product = {
                name: formData.get('name'),
                description: formData.get('description') || '',
                price: parseFloat(formData.get('price')),
                stock: parseInt(formData.get('stock')),
                isActive: formData.get('isActive') === 'true'
            };

            try {
                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(product)
                });

                if (response.ok) {
                    showAlert('success', 'Product created successfully!');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 1500);
                } else {
                    const errorData = await response.json();
                    showAlert('danger', 'Error creating product: ' + (errorData.message || 'Please try again.'));
                }
            } catch (error) {
                console.error('Error creating product:', error);
                showAlert('danger', 'Error creating product. Please check your connection and try again.');
            }
        });

        function showAlert(type, message) {
            const alertContainer = document.getElementById('alertContainer');
            const alertMessage = document.getElementById('alertMessage');
            
            alertMessage.className = `alert alert-${type}`;
            alertMessage.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
            
            alertContainer.style.display = 'block';
            alertContainer.scrollIntoView({ behavior: 'smooth' });
            
            if (type === 'success') {
                setTimeout(() => {
                    alertContainer.style.display = 'none';
                }, 3000);
            }
        }

        // Form validation styling
        document.querySelectorAll('input[required], textarea[required]').forEach(input => {
            input.addEventListener('blur', function() {
                if (this.value.trim() === '') {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                }
            });
        });
    </script>
}